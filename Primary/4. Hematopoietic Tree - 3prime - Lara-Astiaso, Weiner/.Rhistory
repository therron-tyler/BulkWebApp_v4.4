sig = exp(t)/(1+exp(t))
return(-sum(z*log(sig) + (1-z)*log(1-sig)))
}
# F6
f6 = function(x){
b0 = c$par[1]
b1 = c$par[2]
return(1 / (1 + exp(-(b0 + b1*x))))
}
c = optim(fn=f5, par=c(0,0))
c$par
plot(jitter(menarche.cases$age), jitter(menarche.cases$reached.menarche))
points(unique(menarche.cases$age), menarche$Menarche/menarche$Total, col="orange", pch=19)
yhat = f6(c(c$par[1], c$par[2]))
curve(f6, add = TRUE)
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
iris
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/Geysers')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/Geysers')
server <- function(input, output) {
observeEvent(input$go,  ignoreInit=TRUE, {
output$showsummarysettings <- renderText({
"analysis-settings1 include ... and analysis-settings2 include ..."
})
})
}
runApp('Documents/Masters Research/Project Data/R Shiny/Geysers')
runApp('Documents/Masters Research/Project Data/R Shiny/Geysers')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/Geysers')
lad <- function(x, y){
model = lm(y~x)
b0_init = model$coefficients[1]
b1_init = model$coefficients[2]
list(coefficients = c(b0_init, b1_init))
}
area = read.csv("http://www.stat.wisc.edu/~jgillett/305/2/farmLandArea.csv")
lad(x=area$land, y=area$farm)
lad(x=area$land, y=area$farm)
lad <- function(x, y){
model = lm(y~x)
b0_init = model$coefficients[1]
b1_init = model$coefficients[2]
sad <- function(b0, b1){
sum(abs(y - b0 - b1*x))
}
param = optim(c(b0_init, b1_init), sad)
list(coefficients = param)
}
area = read.csv("http://www.stat.wisc.edu/~jgillett/305/2/farmLandArea.csv")
lad(x=area$land, y=area$farm)
lad <- function(x, y){
model = lm(y~x)
b0_init = model$coefficients[1]
b1_init = model$coefficients[2]
sad <- function(b0, b1){
sum(abs(y - b0 - b1*x))
}
param = optim(b0_init, b1_init, sad)
list(coefficients = param)
}
area = read.csv("http://www.stat.wisc.edu/~jgillett/305/2/farmLandArea.csv")
lad(x=area$land, y=area$farm)
lad <- function(x, y){
model = lm(y~x)
b0_init = model$coefficients[1]
b1_init = model$coefficients[2]
sad <- function(b0, b1){
sum(abs(y - b0 - b1*x))
}
param = optim(par = c(b0_init, b1_init), fn = sad)
list(coefficients = param)
}
area = read.csv("http://www.stat.wisc.edu/~jgillett/305/2/farmLandArea.csv")
lad(x=area$land, y=area$farm)
lad <- function(x, y){
model = lm(y~x)
b0_init = model$coefficients[1]
b1_init = model$coefficients[2]
sad <- function(b0, b1){
sum(abs(y - b0 - b1*x))
}
param = optim(par = c(b0_init, b1_init), fn = sad)$par
list(coefficients = param)
}
area = read.csv("http://www.stat.wisc.edu/~jgillett/305/2/farmLandArea.csv")
lad(x=area$land, y=area$farm)
lad <- function(x, y){
model = lm(y~x)
b0_init = model$coefficients[1]
b1_init = model$coefficients[2]
sad <- function(b0, b1){
sum(abs(y - b0 - b1*x))
}
param = optim(fn = sad, par = c(b0_init, b1_init))$par
list(coefficients = param)
}
area = read.csv("http://www.stat.wisc.edu/~jgillett/305/2/farmLandArea.csv")
lad(x=area$land, y=area$farm)
lad <- function(x, y){
model = lm(y~x)
b0_init = model$coefficients[1]
b1_init = model$coefficients[2]
sad <- function(b){
sum(abs(y - b[1] - b[2]*x))
}
param = optim(fn = sad, par = c(b0_init, b1_init))$par
list(coefficients = param)
}
area = read.csv("http://www.stat.wisc.edu/~jgillett/305/2/farmLandArea.csv")
lad(x=area$land, y=area$farm)
View(area)
lad <- function(x, y){
model = lm(y~x)
b0_init = model$coefficients[1]
b1_init = model$coefficients[2]
sad <- function(b){
sum(abs(y - b[1] - b[2]*x))
}
param = optim(fn = sad, par = c(b0_init, b1_init))$par
list(coefficients = param)
}
area = read.csv("http://www.stat.wisc.edu/~jgillett/305/2/farmLandArea.csv")
lad(x=area$land, y=area$farm)
x1 = 1:570000
plot(x = area$land, y = area$farm)
y_pred = -605.3 + 0.3642*x1
lines(x1, y_pred)
plot(x = area$land, y = area$farm)
y_pred = -605.3 + 0.3642*x1
lines(x1, y_pred)
abline(lm(farm~land, area))
lad <- function(x, y){
model = lm(y~x)
b0_init = model$coefficients[1]
b1_init = model$coefficients[2]
sad <- function(b){
sum(abs(y - b[1] - b[2]*x))
}
param = optim(fn = sad, par = c(b0_init, b1_init))$par
fitted = param[1] + param[2] * x
resid = y - fitted
a = list(coefficients = param, fitted.values = fitted, residuals = resid)
class(a) = "lad"
return(a)
}
area = read.csv("http://www.stat.wisc.edu/~jgillett/305/2/farmLandArea.csv")
lad(x=area$land, y=area$farm)
print.lad <- function(x){
if(class(x) == "lad"){
print(x$coefficients)
}
}
model = lad(x=area$land, y=area$farm)
print.lad(model)
print.lad <- function(x){
print(x$coefficients)
}
model = lad(x=area$land, y=area$farm)
print.lad(model)
print(model)
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
create("lad")
setwd("./lad")
document()
document()
setwd("..")
document()
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
?visLegend
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
install.packages("bslib")
install.packages("bslib")
library(bslib) # this package is needed for an accordion panel
?accordion_panel
install.packages("shinyDashboardPlus")
install.packages("shinydashboardPlus")
?accordionItem
install.packages("shinyGizmo")
library(shinyGizmo)
?accordionItem
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
?visLegend
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
# sidebarPanel(
#   selectInput("plotType", "Plot Type",
#     c(Scatter = "scatter", Histogram = "hist")
#   ),
#   # Only show this panel if the plot type is a histogram
#   conditionalPanel(
#     condition = "input.qfunc == 'cell_type'",
#     selectInput(
#       "breaks", "Breaks",
#       c("Sturges", "Scott", "Freedman-Diaconis", "[Custom]" = "custom")
#     ),
#     # Only show this panel if Custom is selected
#     conditionalPanel(
#       condition = "input.breaks == 'custom'",
#       sliderInput("breakCount", "Break Count", min = 1, max = 50, value = 10)
#     )
#   )
# ),
# sidebarPanel(
#   selectInput("plotType", "Plot Type",
#     c(Scatter = "scatter", Histogram = "hist")
#   ),
#   # Only show this panel if the plot type is a histogram
#   conditionalPanel(
#     condition = "input.qfunc == 'cell_type'",
#     selectInput(
#       "breaks", "Breaks",
#       c("Sturges", "Scott", "Freedman-Diaconis", "[Custom]" = "custom")
#     ),
#     # Only show this panel if Custom is selected
#     conditionalPanel(
#       condition = "input.breaks == 'custom'",
#       sliderInput("breakCount", "Break Count", min = 1, max = 50, value = 10)
#     )
#   )
# ),
# sidebarPanel(
#   selectInput("plotType", "Plot Type",
#     c(Scatter = "scatter", Histogram = "hist")
#   ),
#   # Only show this panel if the plot type is a histogram
#   conditionalPanel(
#     condition = "input.qfunc == 'cell_type'",
#     selectInput(
#       "breaks", "Breaks",
#       c("Sturges", "Scott", "Freedman-Diaconis", "[Custom]" = "custom")
#     ),
#     # Only show this panel if Custom is selected
#     conditionalPanel(
#       condition = "input.breaks == 'custom'",
#       sliderInput("breakCount", "Break Count", min = 1, max = 50, value = 10)
#     )
#   )
# ),
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("qfunc", "Query function:",
choiceNames = c("Gene query", "Cell type query"),
choiceValues = c("gene", "cell_type")),
),
# sidebarPanel(
#   selectInput("plotType", "Plot Type",
#     c(Scatter = "scatter", Histogram = "hist")
#   ),
#   # Only show this panel if the plot type is a histogram
#   conditionalPanel(
#     condition = "input.qfunc == 'cell_type'",
#     selectInput(
#       "breaks", "Breaks",
#       c("Sturges", "Scott", "Freedman-Diaconis", "[Custom]" = "custom")
#     ),
#     # Only show this panel if Custom is selected
#     conditionalPanel(
#       condition = "input.breaks == 'custom'",
#       sliderInput("breakCount", "Break Count", min = 1, max = 50, value = 10)
#     )
#   )
# ),
mainPanel(
plotOutput("plot")
)
)
)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("qfunc", "Query function:",
choiceNames = c("Gene query", "Cell type query"),
choiceValues = c("gene", "cell_type")),
),
# sidebarPanel(
#   selectInput("plotType", "Plot Type",
#     c(Scatter = "scatter", Histogram = "hist")
#   ),
#   # Only show this panel if the plot type is a histogram
#   conditionalPanel(
#     condition = "input.qfunc == 'cell_type'",
#     selectInput(
#       "breaks", "Breaks",
#       c("Sturges", "Scott", "Freedman-Diaconis", "[Custom]" = "custom")
#     ),
#     # Only show this panel if Custom is selected
#     conditionalPanel(
#       condition = "input.breaks == 'custom'",
#       sliderInput("breakCount", "Break Count", min = 1, max = 50, value = 10)
#     )
#   )
# ),
),
mainPanel(
plotOutput("plot")
)
)
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
?selectInput
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
runApp('Documents/Masters Research/Project Data/R Shiny/Cincinnati/Cincy')
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
clear
clr
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork/Copy')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork/Copy')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork/Copy')
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
install.packages("ggvenn")
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
shiny::runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
runApp('Documents/Masters Research/Project Data/R Shiny/NodeEdgePlotting/VisNetwork')
shiny::runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
shiny::runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
cat("\014")
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
shiny::runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
setwd("~/Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan/Primary/4. Hematopoietic Tree - 3prime - Lara-Astiaso, Weiner/")
library(data.table)
current_data = fread("Data.csv")
View(current_data)
group_data = fread("GroupFile.csv")
View(group_data)
View(current_data)
current_data = melt(current_data, id.vars = c("Symbol", "Gene_Symbol"))
View(current_data)
library(ggplot2)
ggplot(current_data[Gene_Symbol == "Gnai3",]) +
geom_boxplot(aes(x=variable, y=value))
runApp('~/Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('~/Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('~/Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('~/Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('~/Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('~/Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('~/Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('~/Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('~/Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('~/Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
runApp('~/Documents/Winter Lab/GeneExpressionVisualization_v4.3.1.9.3_ForRyan')
